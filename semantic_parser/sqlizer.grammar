# SQLizer Semantic Parser v1.0
# 
#    Simple Rigid Grammar
# 
# Usage: 
#   Run on the simple grammar (with all four tags on - [compositional join bridge inject])
#   ./run @mode=simple -Grammar.inPaths sqlizer/grammars/lab.grammar -languageAnalyzer corenlp.CoreNLPAnalyzer -Grammar.tags compositional join bridge inject
# 
#   Run on the simple grammar (with two tags on - [compositional join])
#   ./run @mode=simple -Grammar.inPaths sqlizer/simple.grammar -languageAnalyzer corenlp.CoreNLPAnalyzer -Grammar.tags compositional join
# 
#   Run the training too
#   ./run @mode=simple -Grammar.inPaths sqlizer/grammars/lab.grammar -languageAnalyzer corenlp.CoreNLPAnalyzer -Dataset.inPaths train:sqlizer/grammars/train -FeatureExtractor.featureDomains rule

(rule $Noun ($LEMMA_TOKEN) (FilterPosTagFn token WRB WP NN NNS NNP NNPS))
(rule $SimpleNounPhrase ($Noun) (ConcatFn " "))
(rule $SimpleNounPhrase ($Noun $SimpleNounPhrase) (ConcatFn " "))
(rule $Verb ($LEMMA_TOKEN) (FilterPosTagFn token VB VBD VBN VBG VBP VBZ VBD-AUX))
(rule $VerbAux ($LEMMA_TOKEN) (FilterPosTagFn token VBD-AUX))
(rule $Particle ($LEMMA_TOKEN) (FilterPosTagFn token RP))
(rule $Prep ($LEMMA_TOKEN) (FilterPosTagFn token IN TO))
(rule $Adj ($LEMMA_TOKEN) (FilterPosTagFn token JJ))
(rule $Padding ($PHRASE) (IdentityFn)) # Can skip these sequences

(rule $Whword (what $VerbAux) (ConstantFn null null))

(rule $AggHint (how many) (ConstantFn null null))
(rule $AggHint (how much) (ConstantFn null null))
(rule $AggHint (number of) (ConstantFn null null))

(rule $GroupHint (for each) (ConstantFn null null))
(rule $GroupHint (for every) (ConstantFn null null))

(rule $GroupOp ($GroupHint) (ConstantFn (lambda x
    (call + (string "agg:groupby(") (var x)  (string ")") )
)))

(rule $Operator ($AggHint) (ConstantFn (lambda x
    (call + (string "agg:count(") (var x)  (string ")") )
)))

# High Level Entity
(rule $Group (($GroupOp) ($SimpleNounPhrase)) (JoinFn forward betaReduce))
(rule $Aggregate ($Operator $SimpleNounPhrase) (JoinFn forward betaReduce))

# ---------		Predicate rules 			------------
(rule $LocHint (in) (ConstantFn null null))
(rule $LocOp ($LocHint) (ConstantFn (lambda x
    (call + (string "where:location(") (var x)  (string ")") )
)))
(rule $Location ($LocOp ($Padding optional) $PHRASE) (JoinFn forward betaReduce))

# ---------         Root rules              ------------
# (rule $ROOT (($Whword optional) ($Padding optional) $Operator ($Padding optional) $Entities) (JoinFn forward betaReduce))
(rule $Set ($Aggregate) (IdentityFn))
(rule $Set ($Group) (IdentityFn))
(rule $Set ($Location) (IdentityFn))
(rule $Expr ($Set) (IdentityFn))
(rule $Expr ($Set $Set) (ConcatFn ", "))
(rule $ROOT (($Whword optional) ($Padding optional) $Expr (? optional)) (IdentityFn))

